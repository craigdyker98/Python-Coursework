{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c90cb9fe-b01d-4de6-9817-1f79d65d4ce5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inventory Management System\n",
      "Please select one of the following options:\n",
      "1. Check if item exists in inventory\n",
      "2. Add item to inventory\n",
      "3. Add to quantity\n",
      "4. Subtract from quantity\n",
      "5. Remove an item\n",
      "6. Update price\n",
      "7. View report\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "\n",
    "#defining inventory (used AI to generate laptop names)\n",
    "item_inventory = {\n",
    "    key.lower(): value for key, value in{\n",
    "    'Dell Inspiron 15': {'quantity': 5, 'price': 699},\n",
    "    'HP Pavilion x360': {'quantity': 4, 'price': 749},\n",
    "    'Lenovo IdeaPad 3': {'quantity': 6, 'price': 599},\n",
    "    'Acer Aspire 5': {'quantity': 3, 'price': 629},\n",
    "    'Asus ZenBook 14': {'quantity': 2, 'price': 899},\n",
    "    'Microsoft Surface Laptop 4': {'quantity': 2, 'price': 999},\n",
    "    'Apple MacBook Air (M1)': {'quantity': 2, 'price': 999},\n",
    "    'Razer Blade Stealth 13': {'quantity': 1, 'price': 1499},\n",
    "    'MSI GF65 Thin': {'quantity': 2, 'price': 1199},\n",
    "    'Lenovo ThinkPad X1 Carbon': {'quantity': 1, 'price': 1499},\n",
    "    'Dell G3 15 Gaming Laptop': {'quantity': 3, 'price': 1099},\n",
    "    'HP Envy 13': {'quantity': 2, 'price': 849},\n",
    "    'Samsung Galaxy Book Pro': {'quantity': 1, 'price': 1199},\n",
    "    'Acer Chromebook Spin 713': {'quantity': 2, 'price': 629},\n",
    "    'HP Stream 14': {'quantity': 5, 'price': 249},\n",
    "    'Lenovo Chromebook Duet': {'quantity': 4, 'price': 299},\n",
    "    'Dell Latitude 3420': {'quantity': 2, 'price': 849},\n",
    "    'Asus ROG Zephyrus G14': {'quantity': 1, 'price': 1499},\n",
    "    'LG Gram 15': {'quantity': 1, 'price': 1399},\n",
    "    'Huawei MateBook D 14': {'quantity': 1, 'price': 799}\n",
    "    }.items()\n",
    "}\n",
    "\n",
    "with open('item_inventory.pkl', 'rb') as file:\n",
    "    inventory = pickle.load(file)\n",
    "\n",
    "#created function to check item name\n",
    "def check_item_name(item_inventory, item_name):\n",
    "    if item_name in item_inventory:\n",
    "        print(\"Item exist in inventory.\")\n",
    "    else:\n",
    "        print('Item does not exist in inventory.')\n",
    "\n",
    "#created function to add item\n",
    "def add_item(item_inventory, item_name):\n",
    "    if item_name in item_inventory:\n",
    "        print(\"Item exists in inventory.\")\n",
    "    else:\n",
    "        add_item = input(\"Would you like to add item? (Yes/No) \").strip().lower()\n",
    "        if add_item == 'yes':\n",
    "            item_inventory[item_name] = {\"quantity\": 0, \"price\": 0} \n",
    "            print(\"Item added\")\n",
    "        elif add_item == 'no':\n",
    "            print(\"Item has not been added\")\n",
    "        \n",
    "#created function to add to quantity\n",
    "def add_to_quantity(item_inventory, item_name):\n",
    "    if item_name not in item_inventory:\n",
    "        print('Invalid Input')\n",
    "    else:\n",
    "        add_to_quantity = input('Would you like to add to the quantity of this item?: (Yes/No) ').strip().lower()\n",
    "        if add_to_quantity == 'yes':\n",
    "            additional_quantity = int(input('How many would you like to add? '))\n",
    "            item_inventory[item_name][\"quantity\"] += additional_quantity\n",
    "            print('Quantity Updated')\n",
    "        elif add_to_quantity == 'no':\n",
    "            print('No changes will be made')\n",
    "        else:\n",
    "            print('Invalid Input')\n",
    "\n",
    "#created function to subtract from quantity\n",
    "def subtract_from_quantity(item_inventory, item_name):\n",
    "    if item_name not in item_inventory:\n",
    "        print('Invalid Input')\n",
    "    else:\n",
    "        subtract_from_quantity = input('Would you like to subtract the quantity of this item?: (Yes/No) ').strip().lower()\n",
    "        if subtract_from_quantity == 'yes':\n",
    "            subtraction_quantity = int(input('How many would you like to subtract? '))\n",
    "            current_quantity = item_inventory[item_name][\"quantity\"]\n",
    "            if subtraction_quantity > current_quantity:\n",
    "                print(\"Cannot subtract as it exceeds current quantity.\")\n",
    "            else:\n",
    "                item_inventory[item_name][\"quantity\"] -= subtraction_quantity\n",
    "                print('Quantity Updated')\n",
    "        elif subtract_from_quantity == 'no':\n",
    "            print('No changes will be made.')\n",
    "        else:\n",
    "            print('Invalid Input.')\n",
    "\n",
    "#created function to remove item\n",
    "def remove_item(item_inventory, item_name):\n",
    "    if item_name not in item_inventory:\n",
    "        print('Invalid Input')\n",
    "    else:\n",
    "        remove_item = input('Would you like to remove this item? Please Type (Yes/No): ').strip().lower()\n",
    "        if remove_item == 'yes':\n",
    "            del item_inventory[item_name]\n",
    "            print('Item has been removed.')\n",
    "        elif remove_item == 'no':\n",
    "            print('No changes will be made.')\n",
    "        else:\n",
    "            print('Invalid input.')\n",
    "\n",
    "#created function to update price\n",
    "def update_price(item_inventory, item_name):\n",
    "    if item_name not in item_inventory:\n",
    "        print('Invalid Input')\n",
    "    else:\n",
    "        update_price = input('Would you like to update the price for this item? Please Type (Yes/No): ').strip().lower()\n",
    "        if update_price == 'yes':\n",
    "            new_price = float(input('What is the new price for the item? '))\n",
    "            item_inventory[item_name][\"price\"] = new_price\n",
    "            print('Price Updated')\n",
    "        elif update_price == 'no':\n",
    "            print('No changes will be made.')\n",
    "        else:\n",
    "            print('Invalid input.')\n",
    "\n",
    "#created function to print report\n",
    "def print_report(item_inventory, item_name):\n",
    "    if item_name not in item_inventory:\n",
    "        print('Invalid Input')\n",
    "    else:\n",
    "        quantity = item_inventory[item_name][\"quantity\"]\n",
    "        price = item_inventory[item_name][\"price\"]\n",
    "        print_report = input(\"Would you like to print a report for this item? Please Type (Yes/No): \").strip().lower()\n",
    "        if print_report == 'yes':\n",
    "            print('Item Name: ', item_name.upper())\n",
    "            print('Quantity: ', quantity)\n",
    "            print('Price: ', price)\n",
    "            print('Total Value: ', price * quantity)\n",
    "        elif print_report == 'no':\n",
    "            print('No report will be printed.')\n",
    "        else:\n",
    "            print('Invalid input.')\n",
    "            \n",
    "#created loop tp loop through options\n",
    "while True:\n",
    "    print('Inventory Management System')\n",
    "    print('Please select one of the following options:')\n",
    "    print('1. Check if item exists in inventory')\n",
    "    print('2. Add item to inventory')\n",
    "    print('3. Add to quantity')\n",
    "    print('4. Subtract from quantity')\n",
    "    print('5. Remove an item')\n",
    "    print('6. Update price')\n",
    "    print('7. View report')\n",
    "    \n",
    "    user_input = input('Enter number: ').strip().lower()\n",
    "\n",
    "#calling the functions by user input\n",
    "    if user_input == '1':\n",
    "        item_name = input(\"Enter Item Name: \").lower()\n",
    "        check_item_name(item_inventory, item_name)\n",
    "    elif user_input == '2':\n",
    "        item_name = input(\"Enter Item Name: \").lower()\n",
    "        add_item(item_inventory, item_name)\n",
    "        with open('item_inventory.pkl', 'wb') as file:\n",
    "            pickle.dump(item_inventory, file)\n",
    "    elif user_input == '3':\n",
    "        item_name = input(\"Enter Item Name: \").lower()\n",
    "        add_to_quantity(item_inventory, item_name) \n",
    "        with open('item_inventory.pkl', 'wb') as file:\n",
    "            pickle.dump(item_inventory, file)\n",
    "    elif user_input == '4':\n",
    "        item_name = input(\"Enter Item Name: \").lower()\n",
    "        subtract_from_quantity(item_inventory, item_name)\n",
    "        with open('item_inventory.pkl', 'wb') as file:\n",
    "            pickle.dump(item_inventory, file)\n",
    "    elif user_input == '5':\n",
    "        item_name = input(\"Enter Item Name: \").lower()\n",
    "        remove_item(item_inventory, item_name) \n",
    "        with open('item_inventory.pkl', 'wb') as file:\n",
    "            pickle.dump(item_inventory, file)\n",
    "    elif user_input == '6':\n",
    "        item_name = input(\"Enter Item Name: \").lower()\n",
    "        update_price(item_inventory, item_name)\n",
    "        with open('item_inventory.pkl', 'wb') as file:\n",
    "            pickle.dump(item_inventory, file)\n",
    "    elif user_input == '7':\n",
    "        item_name = input(\"Enter Item Name: \").lower()\n",
    "        print_report(item_inventory, item_name)\n",
    "    else:\n",
    "        print(\"Invalid Option\")\n",
    "#used pickle to save after user has made changes\n",
    "#restarts the loop\n",
    "break\n",
    "\n",
    "#used AI for correcting and debugging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5fa4185c-b1a6-4b10-be57-a875f1027728",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d9576329-ac06-43de-b8cc-ef1775db887b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
